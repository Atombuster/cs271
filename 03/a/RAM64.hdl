// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
		DMux8Way(in=load, sel=address[0..2], a=dma, b=dmb, c=dmc, d=dmd, e=dme, f=dmf, g=dmg, h=dmh);
	RAM8(in=in, load=dma, address=address[3..5], out=ma);
	RAM8(in=in, load=dmb, address=address[3..5], out=mb);
	RAM8(in=in, load=dmc, address=address[3..5], out=mc);
	RAM8(in=in, load=dmd, address=address[3..5], out=md);
	RAM8(in=in, load=dme, address=address[3..5], out=me);
	RAM8(in=in, load=dmf, address=address[3..5], out=mf);
	RAM8(in=in, load=dmg, address=address[3..5], out=mg);
	RAM8(in=in, load=dmh, address=address[3..5], out=mh);
	Mux8Way16(a=ma, b=mb, c=mc, d=md, e=me, f=mf, g=mg, h=mh, sel=address[0..2], out=out);

}